[
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            1,
            10
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "import { StrictMode, useEffect } from 'react'\n",
        "import { act, render, screen, waitFor } from '@testing-library/react'\n",
        "import { afterEach, describe, expect, it, vi } from 'vitest'\n",
        "import { create } from 'zustand'\n",
        "import { createJSONStorage, persist } from 'zustand/middleware'\n",
        "import { replacer, reviver } from './test-utils'\n",
        "\n",
        "const createPersistantStore = (initialValue: string | null) => {\n",
        "  let state = initialValue\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        1,
        10
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            11,
            20
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "  const getItem = async (): Promise<string | null> => {\n",
        "    getItemSpy()\n",
        "    return state\n",
        "  }\n",
        "  const setItem = async (name: string, newState: string) => {\n",
        "    setItemSpy(name, newState)\n",
        "    state = newState\n",
        "  }\n",
        "\n",
        "  const removeItem = async (name: string) => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        11,
        20
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            21,
            30
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    removeItemSpy(name)\n",
        "    state = null\n",
        "  }\n",
        "\n",
        "  const getItemSpy = vi.fn()\n",
        "  const setItemSpy = vi.fn()\n",
        "  const removeItemSpy = vi.fn()\n",
        "\n",
        "  return {\n",
        "    storage: { getItem, setItem, removeItem },\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        21,
        30
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            31,
            40
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    getItemSpy,\n",
        "    setItemSpy,\n",
        "    removeItemSpy,\n",
        "  }\n",
        "}\n",
        "\n",
        "describe('persist middleware with async configuration', () => {\n",
        "  const consoleError = console.error\n",
        "  afterEach(() => {\n",
        "    console.error = consoleError\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        31,
        40
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            41,
            50
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "  })\n",
        "\n",
        "  it('can rehydrate state', async () => {\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "    const storage = {\n",
        "      getItem: async (name: string) =>\n",
        "        JSON.stringify({\n",
        "          state: { count: 42, name },\n",
        "          version: 0,\n",
        "        }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        41,
        50
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            51,
            60
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(\n",
        "        () => ({\n",
        "          count: 0,\n",
        "          name: 'empty',\n",
        "        }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        51,
        60
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            61,
            70
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "        {\n",
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage),\n",
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "        },\n",
        "      ),\n",
        "    )\n",
        "\n",
        "    function Counter() {\n",
        "      const { count, name } = useBoundStore()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        61,
        70
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            71,
            80
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      return (\n",
        "        <div>\n",
        "          count: {count}, name: {name}\n",
        "        </div>\n",
        "      )\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        71,
        80
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            81,
            90
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('count: 0, name: empty')).toBeInTheDocument()\n",
        "    expect(\n",
        "      await screen.findByText('count: 42, name: test-storage'),\n",
        "    ).toBeInTheDocument()\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith(\n",
        "      { count: 42, name: 'test-storage' },\n",
        "      undefined,\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        81,
        90
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            91,
            100
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "  })\n",
        "\n",
        "  it('can throw rehydrate error', async () => {\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "\n",
        "    const storage = {\n",
        "      getItem: async () => {\n",
        "        throw new Error('getItem error')\n",
        "      },\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        91,
        100
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            101,
            110
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "      }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        101,
        110
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            111,
            120
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "\n",
        "    function Counter() {\n",
        "      const { count } = useBoundStore()\n",
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        111,
        120
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            121,
            130
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('count: 0')).toBeInTheDocument()\n",
        "    await waitFor(() => {\n",
        "      expect(onRehydrateStorageSpy).toBeCalledWith(\n",
        "        undefined,\n",
        "        new Error('getItem error'),\n",
        "      )\n",
        "    })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        121,
        130
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            131,
            140
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "  })\n",
        "\n",
        "  it('can persist state', async () => {\n",
        "    const { storage, setItemSpy } = createPersistantStore(null)\n",
        "\n",
        "    const createStore = () => {\n",
        "      const onRehydrateStorageSpy = vi.fn()\n",
        "      const useBoundStore = create(\n",
        "        persist(() => ({ count: 0 }), {\n",
        "          name: 'test-storage',\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        131,
        140
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            141,
            150
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "          storage: createJSONStorage(() => storage),\n",
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "        }),\n",
        "      )\n",
        "      return { useBoundStore, onRehydrateStorageSpy }\n",
        "    }\n",
        "\n",
        "    // Initialize from empty storage\n",
        "    const { useBoundStore, onRehydrateStorageSpy } = createStore()\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        141,
        150
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            151,
            160
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    function Counter() {\n",
        "      const { count } = useBoundStore()\n",
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n",
        "      </StrictMode>,\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        151,
        160
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            161,
            170
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    expect(await screen.findByText('count: 0')).toBeInTheDocument()\n",
        "    await waitFor(() => {\n",
        "      expect(onRehydrateStorageSpy).toBeCalledWith({ count: 0 }, undefined)\n",
        "    })\n",
        "\n",
        "    // Write something to the store\n",
        "    act(() => useBoundStore.setState({ count: 42 }))\n",
        "    expect(await screen.findByText('count: 42')).toBeInTheDocument()\n",
        "    expect(setItemSpy).toBeCalledWith(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        161,
        170
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            171,
            180
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      'test-storage',\n",
        "      JSON.stringify({ state: { count: 42 }, version: 0 }),\n",
        "    )\n",
        "\n",
        "    // Create the same store a second time and check if the persisted state\n",
        "    // is loaded correctly\n",
        "    const {\n",
        "      useBoundStore: useBoundStore2,\n",
        "      onRehydrateStorageSpy: onRehydrateStorageSpy2,\n",
        "    } = createStore()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        171,
        180
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            181,
            190
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    function Counter2() {\n",
        "      const { count } = useBoundStore2()\n",
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter2 />\n",
        "      </StrictMode>,\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        181,
        190
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            191,
            200
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    expect(await screen.findByText('count: 42')).toBeInTheDocument()\n",
        "    await waitFor(() => {\n",
        "      expect(onRehydrateStorageSpy2).toBeCalledWith({ count: 42 }, undefined)\n",
        "    })\n",
        "  })\n",
        "\n",
        "  it('can async migrate persisted state', async () => {\n",
        "    const setItemSpy = vi.fn()\n",
        "    const onRehydrateStorageSpy = vi.fn()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        191,
        200
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            201,
            210
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    const migrateSpy = vi.fn(() => Promise.resolve({ count: 99 }))\n",
        "\n",
        "    const storage = {\n",
        "      getItem: async () =>\n",
        "        JSON.stringify({\n",
        "          state: { count: 42 },\n",
        "          version: 12,\n",
        "        }),\n",
        "      setItem: setItemSpy,\n",
        "      removeItem: () => {},\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        201,
        210
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            211,
            220
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        version: 13,\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "        migrate: migrateSpy,\n",
        "      }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        211,
        220
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            221,
            230
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "\n",
        "    function Counter() {\n",
        "      const { count } = useBoundStore()\n",
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        221,
        230
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            231,
            240
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('count: 0')).toBeInTheDocument()\n",
        "    expect(await screen.findByText('count: 99')).toBeInTheDocument()\n",
        "    expect(migrateSpy).toBeCalledWith({ count: 42 }, 12)\n",
        "    expect(setItemSpy).toBeCalledWith(\n",
        "      'test-storage',\n",
        "      JSON.stringify({\n",
        "        state: { count: 99 },\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        231,
        240
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            241,
            250
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "        version: 13,\n",
        "      }),\n",
        "    )\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith({ count: 99 }, undefined)\n",
        "  })\n",
        "\n",
        "  it('can merge partial persisted state', async () => {\n",
        "    const storage = {\n",
        "      getItem: async () =>\n",
        "        JSON.stringify({\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        241,
        250
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            251,
            260
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "          state: { count: 42 },\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create<{\n",
        "      count: number\n",
        "      name: string\n",
        "      setName: (name: string) => void\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        251,
        260
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            261,
            270
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    }>()(\n",
        "      persist(\n",
        "        (set) => ({\n",
        "          count: 0,\n",
        "          name: 'unknown',\n",
        "          setName: (name: string) => {\n",
        "            set({ name })\n",
        "          },\n",
        "        }),\n",
        "        {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        261,
        270
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            271,
            280
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage),\n",
        "        },\n",
        "      ),\n",
        "    )\n",
        "\n",
        "    function Component() {\n",
        "      const { count, setName, name } = useBoundStore()\n",
        "      useEffect(() => {\n",
        "        setName('test')\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        271,
        280
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            281,
            290
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      }, [setName])\n",
        "      return (\n",
        "        <div>\n",
        "          <div>count: {count}</div>\n",
        "          <div>name: {name}</div>\n",
        "        </div>\n",
        "      )\n",
        "    }\n",
        "\n",
        "    render(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        281,
        290
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            291,
            300
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      <StrictMode>\n",
        "        <Component />\n",
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('count: 42')).toBeInTheDocument()\n",
        "    expect(await screen.findByText('name: test')).toBeInTheDocument()\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual(\n",
        "      expect.objectContaining({\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        291,
        300
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            301,
            310
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "        count: 42,\n",
        "        name: 'test',\n",
        "      }),\n",
        "    )\n",
        "  })\n",
        "\n",
        "  it('can correctly handle a missing migrate function', async () => {\n",
        "    console.error = vi.fn()\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "    const storage = {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        301,
        310
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            311,
            320
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      getItem: async () =>\n",
        "        JSON.stringify({\n",
        "          state: { count: 42 },\n",
        "          version: 12,\n",
        "        }),\n",
        "      setItem: (_: string, _value: string) => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        311,
        320
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            321,
            330
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        version: 13,\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    function Counter() {\n",
        "      const { count } = useBoundStore()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        321,
        330
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            331,
            340
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n",
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('count: 0')).toBeInTheDocument()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        331,
        340
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            341,
            350
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    await waitFor(() => {\n",
        "      expect(console.error).toHaveBeenCalled()\n",
        "    })\n",
        "\n",
        "    await waitFor(() => {\n",
        "      expect(onRehydrateStorageSpy).toBeCalledWith({ count: 0 }, undefined)\n",
        "    })\n",
        "  })\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        341,
        350
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            351,
            360
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "  it('can throw migrate error', async () => {\n",
        "    console.error = vi.fn()\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "\n",
        "    const storage = {\n",
        "      getItem: async () =>\n",
        "        JSON.stringify({\n",
        "          state: {},\n",
        "          version: 12,\n",
        "        }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        351,
        360
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            361,
            370
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        version: 13,\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        migrate: () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        361,
        370
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            371,
            380
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "          throw new Error('migrate error')\n",
        "        },\n",
        "        onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    function Counter() {\n",
        "      const { count } = useBoundStore()\n",
        "      return <div>count: {count}</div>\n",
        "    }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        371,
        380
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            381,
            390
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n",
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('count: 0')).toBeInTheDocument()\n",
        "    await waitFor(() => {\n",
        "      expect(onRehydrateStorageSpy).toBeCalledWith(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        381,
        390
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            391,
            400
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "        undefined,\n",
        "        new Error('migrate error'),\n",
        "      )\n",
        "    })\n",
        "  })\n",
        "\n",
        "  it('passes the latest state to onRehydrateStorage and onHydrate on first hydrate', async () => {\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "\n",
        "    const storage = {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        391,
        400
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            401,
            410
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      getItem: async () => JSON.stringify({ state: { count: 1 } }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: onRehydrateStorageSpy,\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        401,
        410
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            411,
            420
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      }),\n",
        "    )\n",
        "\n",
        "    /**\n",
        "     * NOTE: It's currently not possible to add an 'onHydrate' listener which will be\n",
        "     * invoked prior to the first hydration. This is because, during first hydration,\n",
        "     * the 'onHydrate' listener set (which will be empty) is evaluated before the\n",
        "     * 'persist' API is exposed to the caller of 'create'/'createStore'.\n",
        "     *\n",
        "     * const onHydrateSpy = vi.fn()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        411,
        420
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            421,
            430
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "     * useBoundStore.persist.onHydrate(onHydrateSpy)\n",
        "     * ...\n",
        "     * await waitFor(() => expect(onHydrateSpy).toBeCalledWith({ count: 0 }))\n",
        "     */\n",
        "\n",
        "    function Counter() {\n",
        "      const { count } = useBoundStore()\n",
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        421,
        430
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            431,
            440
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n",
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('count: 1')).toBeInTheDocument()\n",
        "\n",
        "    // The 'onRehydrateStorage' spy is invoked prior to rehydration, so it should\n",
        "    // be passed the default state.\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        431,
        440
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            441,
            450
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    await waitFor(() => {\n",
        "      expect(onRehydrateStorageSpy).toBeCalledWith({ count: 0 })\n",
        "    })\n",
        "  })\n",
        "\n",
        "  it('gives the merged state to onRehydrateStorage', async () => {\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "\n",
        "    const storage = {\n",
        "      getItem: async () =>\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        441,
        450
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            451,
            460
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "        JSON.stringify({\n",
        "          state: { count: 1 },\n",
        "          version: 0,\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const unstorableMethod = () => {}\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        451,
        460
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            461,
            470
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0, unstorableMethod }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    function Counter() {\n",
        "      const { count } = useBoundStore()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        461,
        470
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            471,
            480
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n",
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('count: 0')).toBeInTheDocument()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        471,
        480
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            481,
            490
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    await waitFor(() => {\n",
        "      expect(onRehydrateStorageSpy).toBeCalledWith(\n",
        "        { count: 1, unstorableMethod },\n",
        "        undefined,\n",
        "      )\n",
        "    })\n",
        "  })\n",
        "\n",
        "  it('can custom merge the stored state', async () => {\n",
        "    const storage = {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        481,
        490
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            491,
            500
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      getItem: async () =>\n",
        "        JSON.stringify({\n",
        "          state: {\n",
        "            count: 1,\n",
        "            actions: {},\n",
        "          },\n",
        "          version: 0,\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        491,
        500
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            501,
            510
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    }\n",
        "\n",
        "    const unstorableMethod = () => {}\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0, actions: { unstorableMethod } }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        merge: (_persistedState, currentState) => {\n",
        "          const persistedState = _persistedState as any\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        501,
        510
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            511,
            520
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "          delete persistedState.actions\n",
        "\n",
        "          return {\n",
        "            ...currentState,\n",
        "            ...persistedState,\n",
        "          }\n",
        "        },\n",
        "      }),\n",
        "    )\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        511,
        520
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            521,
            530
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    function Counter() {\n",
        "      const { count } = useBoundStore()\n",
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n",
        "      </StrictMode>,\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        521,
        530
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            531,
            540
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    expect(await screen.findByText('count: 1')).toBeInTheDocument()\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 1,\n",
        "      actions: {\n",
        "        unstorableMethod,\n",
        "      },\n",
        "    })\n",
        "  })\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        531,
        540
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            541,
            550
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "  it(\"can merge the state when the storage item doesn't have a version\", async () => {\n",
        "    const storage = {\n",
        "      getItem: async () =>\n",
        "        JSON.stringify({\n",
        "          state: {\n",
        "            count: 1,\n",
        "          },\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        541,
        550
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            551,
            560
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    function Counter() {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        551,
        560
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            561,
            570
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      const { count } = useBoundStore()\n",
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <Counter />\n",
        "      </StrictMode>,\n",
        "    )\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        561,
        570
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            571,
            580
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    expect(await screen.findByText('count: 1')).toBeInTheDocument()\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 1,\n",
        "    })\n",
        "  })\n",
        "\n",
        "  it('can manually rehydrate through the api', async () => {\n",
        "    const storageValue = '{\"state\":{\"count\":1},\"version\":0}'\n",
        "\n",
        "    const storage = {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        571,
        580
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            581,
            590
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      getItem: async () => '',\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "      }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        581,
        590
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            591,
            600
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "\n",
        "    storage.getItem = async () => storageValue\n",
        "    await useBoundStore.persist.rehydrate()\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 1,\n",
        "    })\n",
        "  })\n",
        "\n",
        "  it('can check if the store has been hydrated through the api', async () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        591,
        600
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            601,
            610
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    const storage = {\n",
        "      getItem: async () => null,\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        601,
        610
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            611,
            620
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      }),\n",
        "    )\n",
        "    expect(useBoundStore.persist.hasHydrated()).toBe(false)\n",
        "    await new Promise((resolve) =>\n",
        "      useBoundStore.persist.onFinishHydration(resolve),\n",
        "    )\n",
        "    expect(useBoundStore.persist.hasHydrated()).toBe(true)\n",
        "\n",
        "    await useBoundStore.persist.rehydrate()\n",
        "    expect(useBoundStore.persist.hasHydrated()).toBe(true)\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        611,
        620
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            621,
            630
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "  })\n",
        "\n",
        "  it('can skip initial hydration', async () => {\n",
        "    const storage = {\n",
        "      getItem: async (name: string) => ({\n",
        "        state: { count: 42, name },\n",
        "        version: 0,\n",
        "      }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        621,
        630
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            631,
            640
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    }\n",
        "\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "    const useBoundStore = create(\n",
        "      persist(\n",
        "        () => ({\n",
        "          count: 0,\n",
        "          name: 'empty',\n",
        "        }),\n",
        "        {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        631,
        640
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            641,
            650
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "          name: 'test-storage',\n",
        "          storage: storage,\n",
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "          skipHydration: true,\n",
        "        },\n",
        "      ),\n",
        "    )\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 0,\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        641,
        650
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            651,
            660
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      name: 'empty',\n",
        "    })\n",
        "\n",
        "    // Because `skipHydration` is only in newImpl and the hydration function for newImpl is now a promise\n",
        "    // In the default case we would need to await `onFinishHydration` to assert the auto hydration has completed\n",
        "    // As we are testing the skip hydration case we await nextTick, to make sure the store is initialised\n",
        "    await new Promise((resolve) => process.nextTick(resolve))\n",
        "\n",
        "    // Asserting store hasn't hydrated from nextTick\n",
        "    expect(useBoundStore.persist.hasHydrated()).toBe(false)\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        651,
        660
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            661,
            670
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    await useBoundStore.persist.rehydrate()\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 42,\n",
        "      name: 'test-storage',\n",
        "    })\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith(\n",
        "      { count: 42, name: 'test-storage' },\n",
        "      undefined,\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        661,
        670
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            671,
            680
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "  })\n",
        "\n",
        "  it('handles state updates during onRehydrateStorage', async () => {\n",
        "    const storage = {\n",
        "      getItem: async () => JSON.stringify({ state: { count: 1 } }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        671,
        680
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            681,
            690
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    const useBoundStore = create<{ count: number; inc: () => void }>()(\n",
        "      persist(\n",
        "        (set) => ({\n",
        "          count: 0,\n",
        "          inc: () => set((s) => ({ count: s.count + 1 })),\n",
        "        }),\n",
        "        {\n",
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage),\n",
        "          onRehydrateStorage: () => (s) => s?.inc(),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        681,
        690
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            691,
            700
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "        },\n",
        "      ),\n",
        "    )\n",
        "\n",
        "    function Counter() {\n",
        "      const { count } = useBoundStore()\n",
        "      return <div>count: {count}</div>\n",
        "    }\n",
        "\n",
        "    render(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        691,
        700
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            701,
            710
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      <StrictMode>\n",
        "        <Counter />\n",
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('count: 2')).toBeInTheDocument()\n",
        "    expect(useBoundStore.getState().count).toEqual(2)\n",
        "  })\n",
        "\n",
        "  it('can rehydrate state with custom deserialized Map', async () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        701,
        710
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            711,
            720
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "    const storage = {\n",
        "      getItem: async () =>\n",
        "        JSON.stringify({\n",
        "          state: {\n",
        "            map: { type: 'Map', value: [['foo', 'bar']] },\n",
        "          },\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        711,
        720
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            721,
            730
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(\n",
        "        () => ({\n",
        "          map: new Map(),\n",
        "        }),\n",
        "        {\n",
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage, { replacer, reviver }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        721,
        730
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            731,
            740
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "        },\n",
        "      ),\n",
        "    )\n",
        "\n",
        "    function MapDisplay() {\n",
        "      const { map } = useBoundStore()\n",
        "      return <div>map: {map.get('foo')}</div>\n",
        "    }\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        731,
        740
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            741,
            750
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    render(\n",
        "      <StrictMode>\n",
        "        <MapDisplay />\n",
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('map: bar')).toBeInTheDocument()\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith(\n",
        "      { map: new Map([['foo', 'bar']]) },\n",
        "      undefined,\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        741,
        750
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            751,
            760
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "  })\n",
        "\n",
        "  it('can persist state with custom serialization of Map', async () => {\n",
        "    const { storage, setItemSpy } = createPersistantStore(null)\n",
        "    const map = new Map()\n",
        "\n",
        "    const createStore = () => {\n",
        "      const onRehydrateStorageSpy = vi.fn()\n",
        "      const useBoundStore = create(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        751,
        760
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            761,
            770
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "        persist(() => ({ map }), {\n",
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage, { replacer, reviver }),\n",
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "        }),\n",
        "      )\n",
        "      return { useBoundStore, onRehydrateStorageSpy }\n",
        "    }\n",
        "\n",
        "    // Initialize from empty storage\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        761,
        770
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            771,
            780
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    const { useBoundStore, onRehydrateStorageSpy } = createStore()\n",
        "\n",
        "    function MapDisplay() {\n",
        "      const { map } = useBoundStore()\n",
        "      return <div>map-content: {map.get('foo')}</div>\n",
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <MapDisplay />\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        771,
        780
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            781,
            790
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('map-content:')).toBeInTheDocument()\n",
        "    await waitFor(() => {\n",
        "      expect(onRehydrateStorageSpy).toBeCalledWith({ map }, undefined)\n",
        "    })\n",
        "\n",
        "    // Write something to the store\n",
        "    const updatedMap = new Map(map).set('foo', 'bar')\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        781,
        790
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            791,
            800
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    act(() => useBoundStore.setState({ map: updatedMap }))\n",
        "    expect(await screen.findByText('map-content: bar')).toBeInTheDocument()\n",
        "\n",
        "    expect(setItemSpy).toBeCalledWith(\n",
        "      'test-storage',\n",
        "      JSON.stringify({\n",
        "        state: { map: { type: 'Map', value: [['foo', 'bar']] } },\n",
        "        version: 0,\n",
        "      }),\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        791,
        800
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            801,
            810
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    // Create the same store a second time and check if the persisted state\n",
        "    // is loaded correctly\n",
        "    const {\n",
        "      useBoundStore: useBoundStore2,\n",
        "      onRehydrateStorageSpy: onRehydrateStorageSpy2,\n",
        "    } = createStore()\n",
        "    function MapDisplay2() {\n",
        "      const { map } = useBoundStore2()\n",
        "      return <div>map-content: {map.get('foo')}</div>\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        801,
        810
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            811,
            820
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistAsync.test.tsx"
        }
      ],
      "original": [
        "    }\n",
        "\n",
        "    render(\n",
        "      <StrictMode>\n",
        "        <MapDisplay2 />\n",
        "      </StrictMode>,\n",
        "    )\n",
        "\n",
        "    expect(await screen.findByText('map-content: bar')).toBeInTheDocument()\n",
        "    await waitFor(() => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        811,
        820
      ],
      "module": "tests/persistAsync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            1,
            10
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "import { afterEach, describe, expect, it, vi } from 'vitest'\n",
        "import { create } from 'zustand'\n",
        "import { createJSONStorage, persist } from 'zustand/middleware'\n",
        "import { replacer, reviver } from './test-utils'\n",
        "\n",
        "const createPersistentStore = (initialValue: string | null) => {\n",
        "  let state = initialValue\n",
        "\n",
        "  const getItem = (): string | null => {\n",
        "    getItemSpy()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        1,
        10
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            11,
            20
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    return state\n",
        "  }\n",
        "  const setItem = (name: string, newState: string) => {\n",
        "    setItemSpy(name, newState)\n",
        "    state = newState\n",
        "  }\n",
        "  const removeItem = (name: string) => {\n",
        "    removeItemSpy(name)\n",
        "    state = null\n",
        "  }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        11,
        20
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            21,
            30
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "  const getItemSpy = vi.fn()\n",
        "  const setItemSpy = vi.fn()\n",
        "  const removeItemSpy = vi.fn()\n",
        "\n",
        "  return {\n",
        "    storage: { getItem, setItem, removeItem },\n",
        "    getItemSpy,\n",
        "    setItemSpy,\n",
        "  }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        21,
        30
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            31,
            40
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "}\n",
        "\n",
        "describe('persist middleware with sync configuration', () => {\n",
        "  const consoleError = console.error\n",
        "  afterEach(() => {\n",
        "    console.error = consoleError\n",
        "  })\n",
        "\n",
        "  it('can rehydrate state', () => {\n",
        "    const storage = {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        31,
        40
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            41,
            50
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      getItem: (name: string) =>\n",
        "        JSON.stringify({\n",
        "          state: { count: 42, name },\n",
        "          version: 0,\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const onRehydrateStorageSpy = vi.fn()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        41,
        50
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            51,
            60
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    const useBoundStore = create(\n",
        "      persist(\n",
        "        () => ({\n",
        "          count: 0,\n",
        "          name: 'empty',\n",
        "        }),\n",
        "        {\n",
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage),\n",
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        51,
        60
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            61,
            70
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        },\n",
        "      ),\n",
        "    )\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 42,\n",
        "      name: 'test-storage',\n",
        "    })\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith(\n",
        "      { count: 42, name: 'test-storage' },\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        61,
        70
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            71,
            80
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      undefined,\n",
        "    )\n",
        "  })\n",
        "\n",
        "  it('can throw rehydrate error', () => {\n",
        "    const storage = {\n",
        "      getItem: () => {\n",
        "        throw new Error('getItem error')\n",
        "      },\n",
        "      setItem: () => {},\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        71,
        80
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            81,
            90
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const spy = vi.fn()\n",
        "    create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: () => spy,\n",
        "      }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        81,
        90
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            91,
            100
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "\n",
        "    expect(spy).toBeCalledWith(undefined, new Error('getItem error'))\n",
        "  })\n",
        "\n",
        "  it('can persist state', () => {\n",
        "    const { storage, setItemSpy } = createPersistentStore(null)\n",
        "\n",
        "    const createStore = () => {\n",
        "      const onRehydrateStorageSpy = vi.fn()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        91,
        100
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            101,
            110
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      const useBoundStore = create(\n",
        "        persist(() => ({ count: 0 }), {\n",
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage),\n",
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "        }),\n",
        "      )\n",
        "      return { useBoundStore, onRehydrateStorageSpy }\n",
        "    }\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        101,
        110
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            111,
            120
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    // Initialize from empty storage\n",
        "    const { useBoundStore, onRehydrateStorageSpy } = createStore()\n",
        "    expect(useBoundStore.getState()).toEqual({ count: 0 })\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith({ count: 0 }, undefined)\n",
        "\n",
        "    // Write something to the store\n",
        "    useBoundStore.setState({ count: 42 })\n",
        "    expect(useBoundStore.getState()).toEqual({ count: 42 })\n",
        "    expect(setItemSpy).toBeCalledWith(\n",
        "      'test-storage',\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        111,
        120
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            121,
            130
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      JSON.stringify({ state: { count: 42 }, version: 0 }),\n",
        "    )\n",
        "\n",
        "    // Create the same store a second time and check if the persisted state\n",
        "    // is loaded correctly\n",
        "    const {\n",
        "      useBoundStore: useBoundStore2,\n",
        "      onRehydrateStorageSpy: onRehydrateStorageSpy2,\n",
        "    } = createStore()\n",
        "    expect(useBoundStore2.getState()).toEqual({ count: 42 })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        121,
        130
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            131,
            140
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    expect(onRehydrateStorageSpy2).toBeCalledWith({ count: 42 }, undefined)\n",
        "  })\n",
        "\n",
        "  it('can non-async migrate persisted state', () => {\n",
        "    const setItemSpy = vi.fn()\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "    const migrateSpy = vi.fn(() => ({ count: 99 }))\n",
        "\n",
        "    const storage = {\n",
        "      getItem: () =>\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        131,
        140
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            141,
            150
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        JSON.stringify({\n",
        "          state: { count: 42 },\n",
        "          version: 12,\n",
        "        }),\n",
        "      setItem: setItemSpy,\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        141,
        150
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            151,
            160
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        name: 'test-storage',\n",
        "        version: 13,\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "        migrate: migrateSpy,\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual({ count: 99 })\n",
        "    expect(migrateSpy).toBeCalledWith({ count: 42 }, 12)\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        151,
        160
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            161,
            170
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    expect(setItemSpy).toBeCalledWith(\n",
        "      'test-storage',\n",
        "      JSON.stringify({\n",
        "        state: { count: 99 },\n",
        "        version: 13,\n",
        "      }),\n",
        "    )\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith({ count: 99 }, undefined)\n",
        "  })\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        161,
        170
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            171,
            180
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "  it('can correctly handle a missing migrate function', () => {\n",
        "    console.error = vi.fn()\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "    const storage = {\n",
        "      getItem: () =>\n",
        "        JSON.stringify({\n",
        "          state: { count: 42 },\n",
        "          version: 12,\n",
        "        }),\n",
        "      setItem: (_: string, _value: string) => {},\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        171,
        180
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            181,
            190
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        version: 13,\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "      }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        181,
        190
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            191,
            200
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual({ count: 0 })\n",
        "    expect(console.error).toHaveBeenCalled()\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith({ count: 0 }, undefined)\n",
        "  })\n",
        "\n",
        "  it('can throw migrate error', () => {\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        191,
        200
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            201,
            210
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    const storage = {\n",
        "      getItem: () =>\n",
        "        JSON.stringify({\n",
        "          state: {},\n",
        "          version: 12,\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        201,
        210
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            211,
            220
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        version: 13,\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        migrate: () => {\n",
        "          throw new Error('migrate error')\n",
        "        },\n",
        "        onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "      }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        211,
        220
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            221,
            230
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual({ count: 0 })\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith(\n",
        "      undefined,\n",
        "      new Error('migrate error'),\n",
        "    )\n",
        "  })\n",
        "\n",
        "  it('passes the latest state to onRehydrateStorage and onHydrate on first hydrate', () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        221,
        230
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            231,
            240
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "\n",
        "    const storage = {\n",
        "      getItem: () => JSON.stringify({ state: { count: 1 } }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        231,
        240
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            241,
            250
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: onRehydrateStorageSpy,\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    /**\n",
        "     * NOTE: It's currently not possible to add an 'onHydrate' listener which will be\n",
        "     * invoked prior to the first hydration. This is because, during first hydration,\n",
        "     * the 'onHydrate' listener set (which will be empty) is evaluated before the\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        241,
        250
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            251,
            260
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "     * 'persist' API is exposed to the caller of 'create'/'createStore'.\n",
        "     *\n",
        "     * const onHydrateSpy = vi.fn()\n",
        "     * useBoundStore.persist.onHydrate(onHydrateSpy)\n",
        "     * expect(onHydrateSpy).toBeCalledWith({ count: 0 })\n",
        "     */\n",
        "\n",
        "    // The 'onRehydrateStorage' and 'onHydrate' spies are invoked prior to rehydration,\n",
        "    // so they should both be passed the default state.\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith({ count: 0 })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        251,
        260
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            261,
            270
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    expect(useBoundStore.getState()).toEqual({ count: 1 })\n",
        "  })\n",
        "\n",
        "  it('gives the merged state to onRehydrateStorage', () => {\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "\n",
        "    const storage = {\n",
        "      getItem: () =>\n",
        "        JSON.stringify({\n",
        "          state: { count: 1 },\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        261,
        270
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            271,
            280
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "          version: 0,\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const unstorableMethod = () => {}\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0, unstorableMethod }), {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        271,
        280
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            281,
            290
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    const expectedState = { count: 1, unstorableMethod }\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual(expectedState)\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith(expectedState, undefined)\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        281,
        290
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            291,
            300
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "  })\n",
        "\n",
        "  it('can custom merge the stored state', () => {\n",
        "    const storage = {\n",
        "      getItem: () =>\n",
        "        JSON.stringify({\n",
        "          state: {\n",
        "            count: 1,\n",
        "            actions: {},\n",
        "          },\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        291,
        300
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            301,
            310
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "          version: 0,\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const unstorableMethod = () => {}\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0, actions: { unstorableMethod } }), {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        301,
        310
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            311,
            320
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "        merge: (_persistedState, currentState) => {\n",
        "          const persistedState = _persistedState as any\n",
        "          delete persistedState.actions\n",
        "\n",
        "          return {\n",
        "            ...currentState,\n",
        "            ...persistedState,\n",
        "          }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        311,
        320
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            321,
            330
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        },\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 1,\n",
        "      actions: {\n",
        "        unstorableMethod,\n",
        "      },\n",
        "    })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        321,
        330
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            331,
            340
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "  })\n",
        "\n",
        "  it(\"can merge the state when the storage item doesn't have a version\", () => {\n",
        "    const storage = {\n",
        "      getItem: () =>\n",
        "        JSON.stringify({\n",
        "          state: {\n",
        "            count: 1,\n",
        "          },\n",
        "        }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        331,
        340
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            341,
            350
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "      }),\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        341,
        350
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            351,
            360
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 1,\n",
        "    })\n",
        "  })\n",
        "\n",
        "  it('can filter the persisted value', () => {\n",
        "    const setItemSpy = vi.fn()\n",
        "\n",
        "    const storage = {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        351,
        360
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            361,
            370
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      getItem: () => '',\n",
        "      setItem: setItemSpy,\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(\n",
        "        () => ({\n",
        "          object: {\n",
        "            first: '0',\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        361,
        370
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            371,
            380
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "            second: '1',\n",
        "          },\n",
        "          array: [\n",
        "            {\n",
        "              value: '0',\n",
        "            },\n",
        "            {\n",
        "              value: '1',\n",
        "            },\n",
        "            {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        371,
        380
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            381,
            390
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "              value: '2',\n",
        "            },\n",
        "          ],\n",
        "        }),\n",
        "        {\n",
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage),\n",
        "          partialize: (state) => {\n",
        "            return {\n",
        "              object: {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        381,
        390
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            391,
            400
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "                first: state.object.first,\n",
        "              },\n",
        "              array: state.array.filter((e) => e.value !== '1'),\n",
        "            }\n",
        "          },\n",
        "        },\n",
        "      ),\n",
        "    )\n",
        "\n",
        "    useBoundStore.setState({})\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        391,
        400
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            401,
            410
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    expect(setItemSpy).toBeCalledWith(\n",
        "      'test-storage',\n",
        "      JSON.stringify({\n",
        "        state: {\n",
        "          object: {\n",
        "            first: '0',\n",
        "          },\n",
        "          array: [\n",
        "            {\n",
        "              value: '0',\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        401,
        410
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            411,
            420
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "            },\n",
        "            {\n",
        "              value: '2',\n",
        "            },\n",
        "          ],\n",
        "        },\n",
        "        version: 0,\n",
        "      }),\n",
        "    )\n",
        "  })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        411,
        420
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            421,
            430
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "  it('can access the options through the api', () => {\n",
        "    const storage = {\n",
        "      getItem: () => null,\n",
        "      setItem: vi.fn(),\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        421,
        430
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            431,
            440
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "      }),\n",
        "    )\n",
        "    expect(useBoundStore.persist.getOptions().name).toBeDefined()\n",
        "    expect(useBoundStore.persist.getOptions().name).toBe('test-storage')\n",
        "  })\n",
        "\n",
        "  it('can change the options through the api', () => {\n",
        "    const setItemSpy = vi.fn()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        431,
        440
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            441,
            450
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    const storage = {\n",
        "      getItem: () => null,\n",
        "      setItem: setItemSpy,\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        441,
        450
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            451,
            460
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        storage: createJSONStorage(() => storage),\n",
        "        partialize: (s) => s as Partial<typeof s>,\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    useBoundStore.setState({})\n",
        "    expect(setItemSpy).toBeCalledWith(\n",
        "      'test-storage',\n",
        "      '{\"state\":{\"count\":0},\"version\":0}',\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        451,
        460
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            461,
            470
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    useBoundStore.persist.setOptions({\n",
        "      name: 'test-storage-2',\n",
        "      partialize: (state) =>\n",
        "        Object.fromEntries(\n",
        "          Object.entries(state).filter(([key]) => key !== 'count'),\n",
        "        ),\n",
        "    })\n",
        "    useBoundStore.setState({})\n",
        "    expect(setItemSpy).toBeCalledWith(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        461,
        470
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            471,
            480
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      'test-storage-2',\n",
        "      '{\"state\":{},\"version\":0}',\n",
        "    )\n",
        "  })\n",
        "\n",
        "  it('can clear the storage through the api', () => {\n",
        "    const removeItemSpy = vi.fn()\n",
        "\n",
        "    const storage = {\n",
        "      getItem: () => null,\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        471,
        480
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            481,
            490
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      setItem: () => {},\n",
        "      removeItem: removeItemSpy,\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "      }),\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        481,
        490
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            491,
            500
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    useBoundStore.persist.clearStorage()\n",
        "    expect(removeItemSpy).toBeCalledWith('test-storage')\n",
        "  })\n",
        "\n",
        "  it('can manually rehydrate through the api', () => {\n",
        "    const storageValue = '{\"state\":{\"count\":1},\"version\":0}'\n",
        "\n",
        "    const storage = {\n",
        "      getItem: () => '',\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        491,
        500
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            501,
            510
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "      }),\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        501,
        510
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            511,
            520
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    storage.getItem = () => storageValue\n",
        "    useBoundStore.persist.rehydrate()\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 1,\n",
        "    })\n",
        "  })\n",
        "\n",
        "  it('can check if the store has been hydrated through the api', async () => {\n",
        "    const storage = {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        511,
        520
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            521,
            530
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      getItem: () => null,\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "      }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        521,
        530
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            531,
            540
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "\n",
        "    expect(useBoundStore.persist.hasHydrated()).toBe(true)\n",
        "\n",
        "    await useBoundStore.persist.rehydrate()\n",
        "    expect(useBoundStore.persist.hasHydrated()).toBe(true)\n",
        "  })\n",
        "\n",
        "  it('can wait for rehydration through the api', async () => {\n",
        "    const storageValue1 = '{\"state\":{\"count\":1},\"version\":0}'\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        531,
        540
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            541,
            550
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    const storageValue2 = '{\"state\":{\"count\":2},\"version\":0}'\n",
        "\n",
        "    const onHydrateSpy1 = vi.fn()\n",
        "    const onHydrateSpy2 = vi.fn()\n",
        "    const onFinishHydrationSpy1 = vi.fn()\n",
        "    const onFinishHydrationSpy2 = vi.fn()\n",
        "\n",
        "    const storage = {\n",
        "      getItem: () => '',\n",
        "      setItem: () => {},\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        541,
        550
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            551,
            560
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({ count: 0 }), {\n",
        "        name: 'test-storage',\n",
        "        storage: createJSONStorage(() => storage),\n",
        "      }),\n",
        "    )\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        551,
        560
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            561,
            570
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    const hydrateUnsub1 = useBoundStore.persist.onHydrate(onHydrateSpy1)\n",
        "    useBoundStore.persist.onHydrate(onHydrateSpy2)\n",
        "\n",
        "    const finishHydrationUnsub1 = useBoundStore.persist.onFinishHydration(\n",
        "      onFinishHydrationSpy1,\n",
        "    )\n",
        "    useBoundStore.persist.onFinishHydration(onFinishHydrationSpy2)\n",
        "\n",
        "    storage.getItem = () => storageValue1\n",
        "    await useBoundStore.persist.rehydrate()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        561,
        570
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            571,
            580
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    expect(onHydrateSpy1).toBeCalledWith({ count: 0 })\n",
        "    expect(onHydrateSpy2).toBeCalledWith({ count: 0 })\n",
        "    expect(onFinishHydrationSpy1).toBeCalledWith({ count: 1 })\n",
        "    expect(onFinishHydrationSpy2).toBeCalledWith({ count: 1 })\n",
        "\n",
        "    hydrateUnsub1()\n",
        "    finishHydrationUnsub1()\n",
        "\n",
        "    storage.getItem = () => storageValue2\n",
        "    await useBoundStore.persist.rehydrate()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        571,
        580
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            581,
            590
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    expect(onHydrateSpy1).not.toBeCalledTimes(2)\n",
        "    expect(onHydrateSpy2).toBeCalledWith({ count: 1 })\n",
        "    expect(onFinishHydrationSpy1).not.toBeCalledTimes(2)\n",
        "    expect(onFinishHydrationSpy2).toBeCalledWith({ count: 2 })\n",
        "  })\n",
        "\n",
        "  it('can skip initial hydration', async () => {\n",
        "    const storage = {\n",
        "      getItem: (name: string) => ({\n",
        "        state: { count: 42, name },\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        581,
        590
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            591,
            600
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        version: 0,\n",
        "      }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "    const useBoundStore = create(\n",
        "      persist(\n",
        "        () => ({\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        591,
        600
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            601,
            610
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "          count: 0,\n",
        "          name: 'empty',\n",
        "        }),\n",
        "        {\n",
        "          name: 'test-storage',\n",
        "          storage: storage,\n",
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "          skipHydration: true,\n",
        "        },\n",
        "      ),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        601,
        610
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            611,
            620
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 0,\n",
        "      name: 'empty',\n",
        "    })\n",
        "\n",
        "    // Because `skipHydration` is only in newImpl and the hydration function for newImpl is now a promise\n",
        "    // In the default case we would need to await `onFinishHydration` to assert the auto hydration has completed\n",
        "    // As we are testing the skip hydration case we await nextTick, to make sure the store is initialised\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        611,
        620
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            621,
            630
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    await new Promise((resolve) => process.nextTick(resolve))\n",
        "\n",
        "    // Asserting store hasn't hydrated from nextTick\n",
        "    expect(useBoundStore.persist.hasHydrated()).toBe(false)\n",
        "\n",
        "    await useBoundStore.persist.rehydrate()\n",
        "\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      count: 42,\n",
        "      name: 'test-storage',\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        621,
        630
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            631,
            640
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    })\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith(\n",
        "      { count: 42, name: 'test-storage' },\n",
        "      undefined,\n",
        "    )\n",
        "  })\n",
        "\n",
        "  it('handles state updates during onRehydrateStorage', () => {\n",
        "    const storage = {\n",
        "      getItem: () => JSON.stringify({ state: { count: 1 } }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        631,
        640
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            641,
            650
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n",
        "\n",
        "    const useBoundStore = create<{ count: number; inc: () => void }>()(\n",
        "      persist(\n",
        "        (set) => ({\n",
        "          count: 0,\n",
        "          inc: () => set((s) => ({ count: s.count + 1 })),\n",
        "        }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        641,
        650
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            651,
            660
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        {\n",
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage),\n",
        "          onRehydrateStorage: () => (s) => s?.inc(),\n",
        "        },\n",
        "      ),\n",
        "    )\n",
        "\n",
        "    expect(useBoundStore.getState().count).toEqual(2)\n",
        "  })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        651,
        660
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            661,
            670
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "  it('can rehydrate state with custom deserialized Map', () => {\n",
        "    const storage = {\n",
        "      getItem: () =>\n",
        "        JSON.stringify({\n",
        "          map: { type: 'Map', value: [['foo', 'bar']] },\n",
        "        }),\n",
        "      setItem: () => {},\n",
        "      removeItem: () => {},\n",
        "    }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        661,
        670
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            671,
            680
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    const map = new Map()\n",
        "    const onRehydrateStorageSpy = vi.fn()\n",
        "    const useBoundStore = create(\n",
        "      persist(\n",
        "        () => ({\n",
        "          map,\n",
        "        }),\n",
        "        {\n",
        "          name: 'test-storage',\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        671,
        680
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            681,
            690
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "          storage: createJSONStorage(() => storage),\n",
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "        },\n",
        "      ),\n",
        "    )\n",
        "\n",
        "    const updatedMap = map.set('foo', 'bar')\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      map: updatedMap,\n",
        "    })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        681,
        690
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            691,
            700
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    expect(onRehydrateStorageSpy).toBeCalledWith({ map: updatedMap }, undefined)\n",
        "  })\n",
        "\n",
        "  it('can persist state with custom serialization of Map', () => {\n",
        "    const { storage, setItemSpy } = createPersistentStore(null)\n",
        "    const map = new Map()\n",
        "\n",
        "    const createStore = () => {\n",
        "      const onRehydrateStorageSpy = vi.fn()\n",
        "      const useBoundStore = create(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        691,
        700
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            701,
            710
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "        persist(() => ({ map }), {\n",
        "          name: 'test-storage',\n",
        "          storage: createJSONStorage(() => storage, { replacer, reviver }),\n",
        "          onRehydrateStorage: () => onRehydrateStorageSpy,\n",
        "        }),\n",
        "      )\n",
        "      return { useBoundStore, onRehydrateStorageSpy }\n",
        "    }\n",
        "\n",
        "    // Initialize from empty storage\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        701,
        710
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            711,
            720
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    const { useBoundStore, onRehydrateStorageSpy } = createStore()\n",
        "    expect(useBoundStore.getState()).toEqual({ map })\n",
        "    expect(onRehydrateStorageSpy).toBeCalledWith({ map }, undefined)\n",
        "\n",
        "    // Write something to the store\n",
        "    const updatedMap = map.set('foo', 'bar')\n",
        "    useBoundStore.setState({ map: updatedMap })\n",
        "    expect(useBoundStore.getState()).toEqual({\n",
        "      map: updatedMap,\n",
        "    })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        711,
        720
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            721,
            730
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    expect(setItemSpy).toBeCalledWith(\n",
        "      'test-storage',\n",
        "      JSON.stringify({\n",
        "        state: { map: { type: 'Map', value: [['foo', 'bar']] } },\n",
        "        version: 0,\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    // Create the same store a second time and check if the persisted state\n",
        "    // is loaded correctly\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        721,
        730
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            731,
            740
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    const {\n",
        "      useBoundStore: useBoundStore2,\n",
        "      onRehydrateStorageSpy: onRehydrateStorageSpy2,\n",
        "    } = createStore()\n",
        "    expect(useBoundStore2.getState()).toEqual({ map: updatedMap })\n",
        "    expect(onRehydrateStorageSpy2).toBeCalledWith(\n",
        "      { map: updatedMap },\n",
        "      undefined,\n",
        "    )\n",
        "  })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        731,
        740
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            741,
            750
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "\n",
        "  it('does not call setItem when hydrating from its own storage', async () => {\n",
        "    const setItem = vi.fn()\n",
        "    const storage = {\n",
        "      getItem: (name: string) => ({\n",
        "        state: { count: 42, name },\n",
        "        version: 0,\n",
        "      }),\n",
        "      setItem,\n",
        "      removeItem: () => {},\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        741,
        750
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            751,
            760
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/persistSync.test.tsx"
        }
      ],
      "original": [
        "    }\n",
        "\n",
        "    const useBoundStore = create(\n",
        "      persist(() => ({}), {\n",
        "        name: 'test-storage',\n",
        "        storage: storage,\n",
        "      }),\n",
        "    )\n",
        "\n",
        "    expect(useBoundStore.persist.hasHydrated()).toBe(true)\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        751,
        760
      ],
      "module": "tests/persistSync.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            1,
            10
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "/* eslint @typescript-eslint/no-unused-expressions: off */ // FIXME\n",
        "/* eslint react-hooks/react-compiler: off */\n",
        "\n",
        "import { describe, expect, expectTypeOf, it } from 'vitest'\n",
        "import { create } from 'zustand'\n",
        "import type { StateCreator, StoreApi, StoreMutatorIdentifier } from 'zustand'\n",
        "import {\n",
        "  combine,\n",
        "  devtools,\n",
        "  persist,\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        1,
        10
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            11,
            20
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "  redux,\n",
        "  subscribeWithSelector,\n",
        "} from 'zustand/middleware'\n",
        "import { immer } from 'zustand/middleware/immer'\n",
        "import { createStore } from 'zustand/vanilla'\n",
        "\n",
        "type CounterState = {\n",
        "  count: number\n",
        "  inc: () => void\n",
        "}\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        11,
        20
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            21,
            30
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "\n",
        "type ExampleStateCreator<T, A> = <\n",
        "  Mps extends [StoreMutatorIdentifier, unknown][] = [],\n",
        "  Mcs extends [StoreMutatorIdentifier, unknown][] = [],\n",
        "  U = T,\n",
        ">(\n",
        "  f: StateCreator<T, [...Mps, ['org/example', A]], Mcs>,\n",
        ") => StateCreator<T, Mps, [['org/example', A], ...Mcs], U & A>\n",
        "\n",
        "type Write<T, U> = Omit<T, keyof U> & U\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        21,
        30
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            31,
            40
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "type StoreModifyAllButSetState<S, A> = S extends {\n",
        "  getState: () => infer T\n",
        "}\n",
        "  ? Omit<StoreApi<T & A>, 'setState'>\n",
        "  : never\n",
        "\n",
        "declare module 'zustand/vanilla' {\n",
        "  interface StoreMutators<S, A> {\n",
        "    'org/example': Write<S, StoreModifyAllButSetState<S, A>>\n",
        "  }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        31,
        40
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            41,
            50
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "}\n",
        "\n",
        "describe('counter state spec (no middleware)', () => {\n",
        "  it('no middleware', () => {\n",
        "    const useBoundStore = create<CounterState>((set, get) => ({\n",
        "      count: 0,\n",
        "      inc: () => set({ count: get().count + 1 }, false),\n",
        "    }))\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        41,
        50
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            51,
            60
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "})\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        51,
        60
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            61,
            70
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "\n",
        "describe('counter state spec (single middleware)', () => {\n",
        "  it('immer', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      immer((set, get) => ({\n",
        "        count: 0,\n",
        "        inc: () =>\n",
        "          set((state) => {\n",
        "            state.count = get().count + 1\n",
        "          }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        61,
        70
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            71,
            80
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      })),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      return <></>\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        71,
        80
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            81,
            90
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    }\n",
        "    TestComponent\n",
        "\n",
        "    const testSubtyping: StoreApi<object> = createStore(\n",
        "      immer(() => ({ count: 0 })),\n",
        "    )\n",
        "    expect(testSubtyping).toBeDefined()\n",
        "\n",
        "    const exampleMiddleware = ((initializer) =>\n",
        "      initializer) as ExampleStateCreator<CounterState, { additional: number }>\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        81,
        90
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            91,
            100
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "\n",
        "    const testDerivedSetStateType = create<CounterState>()(\n",
        "      exampleMiddleware(\n",
        "        immer((set, get) => ({\n",
        "          count: 0,\n",
        "          inc: () =>\n",
        "            set((state) => {\n",
        "              state.count = get().count + 1\n",
        "              type OmitFn<T> = Exclude<T, (...args: any[]) => any>\n",
        "              expectTypeOf<\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        91,
        100
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            101,
            110
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "                OmitFn<Parameters<typeof set>[0]>\n",
        "              >().not.toMatchTypeOf<{ additional: number }>()\n",
        "              expectTypeOf<ReturnType<typeof get>>().toMatchTypeOf<{\n",
        "                additional: number\n",
        "              }>()\n",
        "            }),\n",
        "        })),\n",
        "      ),\n",
        "    )\n",
        "    expect(testDerivedSetStateType).toBeDefined()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        101,
        110
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            111,
            120
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    // the type of the `getState` should include our new property\n",
        "    expectTypeOf(testDerivedSetStateType.getState()).toMatchTypeOf<{\n",
        "      additional: number\n",
        "    }>()\n",
        "    // the type of the `setState` should not include our new property\n",
        "    expectTypeOf<\n",
        "      Parameters<typeof testDerivedSetStateType.setState>[0]\n",
        "    >().not.toMatchTypeOf<{\n",
        "      additional: number\n",
        "    }>()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        111,
        120
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            121,
            130
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "  })\n",
        "\n",
        "  it('redux', () => {\n",
        "    const useBoundStore = create(\n",
        "      redux<{ count: number }, { type: 'INC' }>(\n",
        "        (state, action) => {\n",
        "          switch (action.type) {\n",
        "            case 'INC':\n",
        "              return { ...state, count: state.count + 1 }\n",
        "            default:\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        121,
        130
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            131,
            140
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "              return state\n",
        "          }\n",
        "        },\n",
        "        { count: 0 },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.dispatch)({ type: 'INC' })\n",
        "      useBoundStore().dispatch({ type: 'INC' })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        131,
        140
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            141,
            150
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore.dispatch({ type: 'INC' })\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "\n",
        "    const testSubtyping: StoreApi<object> = createStore(\n",
        "      redux((x) => x, { count: 0 }),\n",
        "    )\n",
        "    expect(testSubtyping).toBeDefined()\n",
        "  })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        141,
        150
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            151,
            160
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "\n",
        "  it('devtools', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      devtools(\n",
        "        (set, get) => ({\n",
        "          count: 0,\n",
        "          inc: () => set({ count: get().count + 1 }, false, 'inc'),\n",
        "        }),\n",
        "        { name: 'prefix' },\n",
        "      ),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        151,
        160
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            161,
            170
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      return <></>\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        161,
        170
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            171,
            180
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    }\n",
        "    TestComponent\n",
        "\n",
        "    const testSubtyping: StoreApi<object> = createStore(\n",
        "      devtools(() => ({ count: 0 })),\n",
        "    )\n",
        "    expect(testSubtyping).toBeDefined()\n",
        "  })\n",
        "\n",
        "  it('devtools #2700', () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        171,
        180
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            181,
            190
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    type TableStore = {\n",
        "      table: string\n",
        "    }\n",
        "    const useStoreA = create<TableStore | null>()(\n",
        "      devtools((_set) => null, { name: 'table-storage' }),\n",
        "    )\n",
        "    expect(useStoreA).toBeDefined()\n",
        "    const useStoreB = create<TableStore | null>()(\n",
        "      devtools(() => null, { name: 'table-storage' }),\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        181,
        190
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            191,
            200
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    expect(useStoreB).toBeDefined()\n",
        "    const useStoreC = create<TableStore | null>()((_set) => null)\n",
        "    expect(useStoreC).toBeDefined()\n",
        "    const useStoreD = create<TableStore | null>()(() => null)\n",
        "    expect(useStoreD).toBeDefined()\n",
        "  })\n",
        "\n",
        "  it('subscribeWithSelector', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      subscribeWithSelector((set, get) => ({\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        191,
        200
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            201,
            210
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "        count: 1,\n",
        "        inc: () => set({ count: get().count + 1 }, false),\n",
        "      })),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        201,
        210
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            211,
            220
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.subscribe(\n",
        "        (state) => state.count,\n",
        "        (count) => console.log(count * 2),\n",
        "      )\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "\n",
        "    const testSubtyping: StoreApi<object> = createStore(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        211,
        220
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            221,
            230
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      subscribeWithSelector(() => ({ count: 0 })),\n",
        "    )\n",
        "    expect(testSubtyping).toBeDefined()\n",
        "  })\n",
        "\n",
        "  it('combine', () => {\n",
        "    const useBoundStore = create(\n",
        "      combine({ count: 1 }, (set, get) => ({\n",
        "        inc: () => set({ count: get().count + 1 }, false),\n",
        "      })),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        221,
        230
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            231,
            240
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      return <></>\n",
        "    }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        231,
        240
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            241,
            250
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    TestComponent\n",
        "\n",
        "    const testSubtyping: StoreApi<object> = createStore(\n",
        "      combine({ count: 0 }, () => ({})),\n",
        "    )\n",
        "    expect(testSubtyping).toBeDefined()\n",
        "  })\n",
        "\n",
        "  it('persist', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        241,
        250
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            251,
            260
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      persist(\n",
        "        (set, get) => ({\n",
        "          count: 1,\n",
        "          inc: () => set({ count: get().count + 1 }, false),\n",
        "        }),\n",
        "        { name: 'prefix' },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        251,
        260
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            261,
            270
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.persist.hasHydrated()\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        261,
        270
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            271,
            280
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    const testSubtyping: StoreApi<object> = createStore(\n",
        "      persist(() => ({ count: 0 }), { name: 'prefix' }),\n",
        "    )\n",
        "    expect(testSubtyping).toBeDefined()\n",
        "  })\n",
        "\n",
        "  it('persist with partialize', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      persist(\n",
        "        (set, get) => ({\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        271,
        280
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            281,
            290
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "          count: 1,\n",
        "          inc: () => set({ count: get().count + 1 }, false),\n",
        "        }),\n",
        "        { name: 'prefix', partialize: (s) => s.count },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        281,
        290
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            291,
            300
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.persist.hasHydrated()\n",
        "      useBoundStore.persist.setOptions({\n",
        "        // @ts-expect-error to test if the partialized state is inferred as number\n",
        "        partialize: () => 'not-a-number',\n",
        "      })\n",
        "      return <></>\n",
        "    }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        291,
        300
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            301,
            310
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    TestComponent\n",
        "  })\n",
        "\n",
        "  it('persist without custom api (#638)', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      persist(\n",
        "        (set, get) => ({\n",
        "          count: 1,\n",
        "          inc: () => set({ count: get().count + 1 }, false),\n",
        "        }),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        301,
        310
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            311,
            320
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "        { name: 'prefix' },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        311,
        320
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            321,
            330
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "})\n",
        "\n",
        "describe('counter state spec (double middleware)', () => {\n",
        "  it('immer & devtools', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      immer(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        321,
        330
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            331,
            340
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "        devtools(\n",
        "          (set, get) => ({\n",
        "            count: 0,\n",
        "            inc: () =>\n",
        "              set(\n",
        "                (state) => {\n",
        "                  state.count = get().count + 1\n",
        "                },\n",
        "                false,\n",
        "                { type: 'inc', by: 1 },\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        331,
        340
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            341,
            350
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "              ),\n",
        "          }),\n",
        "          { name: 'prefix' },\n",
        "        ),\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        341,
        350
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            351,
            360
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "\n",
        "  it('devtools & redux', () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        351,
        360
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            361,
            370
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    const useBoundStore = create(\n",
        "      devtools(\n",
        "        redux(\n",
        "          (state, action: { type: 'INC' }) => {\n",
        "            switch (action.type) {\n",
        "              case 'INC':\n",
        "                return { ...state, count: state.count + 1 }\n",
        "              default:\n",
        "                return state\n",
        "            }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        361,
        370
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            371,
            380
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "          },\n",
        "          { count: 0 },\n",
        "        ),\n",
        "        { name: 'prefix' },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.dispatch)({ type: 'INC' })\n",
        "      useBoundStore().dispatch({ type: 'INC' })\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        371,
        380
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            381,
            390
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore.dispatch({ type: 'INC' })\n",
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "\n",
        "  it('devtools & combine', () => {\n",
        "    const useBoundStore = create(\n",
        "      devtools(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        381,
        390
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            391,
            400
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "        combine({ count: 1 }, (set, get) => ({\n",
        "          inc: () => set({ count: get().count + 1 }, false, 'inc'),\n",
        "        })),\n",
        "        { name: 'prefix' },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        391,
        400
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            401,
            410
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "\n",
        "  it('subscribeWithSelector & combine', () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        401,
        410
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            411,
            420
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    const useBoundStore = create(\n",
        "      subscribeWithSelector(\n",
        "        combine({ count: 1 }, (set, get) => ({\n",
        "          inc: () => set({ count: get().count + 1 }, false),\n",
        "        })),\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        411,
        420
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            421,
            430
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.subscribe(\n",
        "        (state) => state.count,\n",
        "        (count) => console.log(count * 2),\n",
        "      )\n",
        "      return <></>\n",
        "    }\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        421,
        430
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            431,
            440
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    TestComponent\n",
        "  })\n",
        "\n",
        "  it('devtools & subscribeWithSelector', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      devtools(\n",
        "        subscribeWithSelector((set, get) => ({\n",
        "          count: 1,\n",
        "          inc: () => set({ count: get().count + 1 }, false, 'inc'),\n",
        "        })),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        431,
        440
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            441,
            450
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "        { name: 'prefix' },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        441,
        450
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            451,
            460
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore.subscribe(\n",
        "        (state) => state.count,\n",
        "        (count) => console.log(count * 2),\n",
        "      )\n",
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        451,
        460
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            461,
            470
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "  it('devtools & persist', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      devtools(\n",
        "        persist(\n",
        "          (set, get) => ({\n",
        "            count: 1,\n",
        "            inc: () => set({ count: get().count + 1 }, false, 'inc'),\n",
        "          }),\n",
        "          { name: 'count' },\n",
        "        ),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        461,
        470
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            471,
            480
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "        { name: 'prefix' },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        471,
        480
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            481,
            490
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      useBoundStore.persist.hasHydrated()\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "})\n",
        "\n",
        "describe('counter state spec (triple middleware)', () => {\n",
        "  it('devtools & persist & immer', () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        481,
        490
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            491,
            500
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    const useBoundStore = create<CounterState>()(\n",
        "      devtools(\n",
        "        persist(\n",
        "          immer((set, get) => ({\n",
        "            count: 0,\n",
        "            inc: () =>\n",
        "              set((state) => {\n",
        "                state.count = get().count + 1\n",
        "              }),\n",
        "          })),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        491,
        500
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            501,
            510
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "          { name: 'count' },\n",
        "        ),\n",
        "        { name: 'prefix' },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        501,
        510
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            511,
            520
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      useBoundStore.persist.hasHydrated()\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "\n",
        "  it('devtools & subscribeWithSelector & combine', () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        511,
        520
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            521,
            530
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    const useBoundStore = create(\n",
        "      devtools(\n",
        "        subscribeWithSelector(\n",
        "          combine({ count: 1 }, (set, get) => ({\n",
        "            inc: () => set({ count: get().count + 1 }, false, 'inc'),\n",
        "          })),\n",
        "        ),\n",
        "        { name: 'prefix' },\n",
        "      ),\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        521,
        530
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            531,
            540
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.subscribe(\n",
        "        (state) => state.count,\n",
        "        (count) => console.log(count * 2),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        531,
        540
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            541,
            550
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      )\n",
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "\n",
        "  it('devtools & subscribeWithSelector & persist', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      devtools(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        541,
        550
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            551,
            560
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "        subscribeWithSelector(\n",
        "          persist(\n",
        "            (set, get) => ({\n",
        "              count: 0,\n",
        "              inc: () => set({ count: get().count + 1 }, false),\n",
        "            }),\n",
        "            { name: 'count' },\n",
        "          ),\n",
        "        ),\n",
        "        { name: 'prefix' },\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        551,
        560
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            561,
            570
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.subscribe(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        561,
        570
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            571,
            580
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "        (state) => state.count,\n",
        "        (count) => console.log(count * 2),\n",
        "      )\n",
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      useBoundStore.persist.hasHydrated()\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "})\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        571,
        580
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            581,
            590
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "\n",
        "describe('counter state spec (quadruple middleware)', () => {\n",
        "  it('devtools & subscribeWithSelector & persist & immer (#616)', () => {\n",
        "    const useBoundStore = create<CounterState>()(\n",
        "      devtools(\n",
        "        subscribeWithSelector(\n",
        "          persist(\n",
        "            immer((set, get) => ({\n",
        "              count: 0,\n",
        "              inc: () =>\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        581,
        590
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            591,
            600
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "                set((state) => {\n",
        "                  state.count = get().count + 1\n",
        "                }),\n",
        "            })),\n",
        "            { name: 'count' },\n",
        "          ),\n",
        "        ),\n",
        "        { name: 'prefix' },\n",
        "      ),\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        591,
        600
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            601,
            610
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.subscribe(\n",
        "        (state) => state.count,\n",
        "        (count) => console.log(count * 2),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        601,
        610
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            611,
            620
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      )\n",
        "      useBoundStore.setState({ count: 0 }, false, 'reset')\n",
        "      useBoundStore.persist.hasHydrated()\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "})\n",
        "\n",
        "describe('more complex state spec with subscribeWithSelector', () => {\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        611,
        620
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            621,
            630
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "  it('#619, #632', () => {\n",
        "    const useBoundStore = create(\n",
        "      subscribeWithSelector(\n",
        "        persist(\n",
        "          () => ({\n",
        "            foo: true,\n",
        "          }),\n",
        "          { name: 'name' },\n",
        "        ),\n",
        "      ),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        621,
        630
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            631,
            640
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.foo)\n",
        "      useBoundStore().foo\n",
        "      useBoundStore.getState().foo\n",
        "      useBoundStore.subscribe(\n",
        "        (state) => state.foo,\n",
        "        (foo) => console.log(foo),\n",
        "      )\n",
        "      useBoundStore.persist.hasHydrated()\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        631,
        640
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            641,
            650
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "\n",
        "  it('#631', () => {\n",
        "    type MyState = {\n",
        "      foo: number | null\n",
        "    }\n",
        "    const useBoundStore = create<MyState>()(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        641,
        650
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            651,
            660
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      subscribeWithSelector(\n",
        "        () =>\n",
        "          ({\n",
        "            foo: 1,\n",
        "          }) as MyState, // NOTE: Asserting the entire state works too.\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.foo)\n",
        "      useBoundStore().foo\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        651,
        660
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            661,
            670
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore.getState().foo\n",
        "      useBoundStore.subscribe(\n",
        "        (state) => state.foo,\n",
        "        (foo) => console.log(foo),\n",
        "      )\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        661,
        670
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            671,
            680
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "  it('#650', () => {\n",
        "    type MyState = {\n",
        "      token: string | undefined\n",
        "      authenticated: boolean\n",
        "      authenticate: (username: string, password: string) => Promise<void>\n",
        "    }\n",
        "    const useBoundStore = create<MyState>()(\n",
        "      persist(\n",
        "        (set) => ({\n",
        "          token: undefined,\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        671,
        680
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            681,
            690
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "          authenticated: false,\n",
        "          authenticate: async (_username, _password) => {\n",
        "            set({ authenticated: true })\n",
        "          },\n",
        "        }),\n",
        "        { name: 'auth-store' },\n",
        "      ),\n",
        "    )\n",
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.authenticated)\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        681,
        690
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            691,
            700
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      useBoundStore((s) => s.authenticate)('u', 'p')\n",
        "      useBoundStore().authenticated\n",
        "      useBoundStore().authenticate('u', 'p')\n",
        "      useBoundStore.getState().authenticated\n",
        "      useBoundStore.getState().authenticate('u', 'p')\n",
        "      return <></>\n",
        "    }\n",
        "    TestComponent\n",
        "  })\n",
        "})\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        691,
        700
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            701,
            710
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "\n",
        "describe('create with explicitly annotated mutators', () => {\n",
        "  it('subscribeWithSelector & persist', () => {\n",
        "    const useBoundStore = create<\n",
        "      CounterState,\n",
        "      [\n",
        "        ['zustand/subscribeWithSelector', never],\n",
        "        ['zustand/persist', CounterState],\n",
        "      ]\n",
        "    >(\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        701,
        710
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            711,
            720
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "      subscribeWithSelector(\n",
        "        persist(\n",
        "          (set, get) => ({\n",
        "            count: 0,\n",
        "            inc: () => set({ count: get().count + 1 }, false),\n",
        "          }),\n",
        "          { name: 'count' },\n",
        "        ),\n",
        "      ),\n",
        "    )\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        711,
        720
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  },
  {
    "span": {
      "headers": [
        {
          "change_tks": [],
          "type": "function",
          "line_range": [
            721,
            730
          ],
          "path": "datasets_root/perm2k_ts/repos/test/pmndrs~zustand/tests/middlewareTypes.test.tsx"
        }
      ],
      "original": [
        "    const TestComponent = () => {\n",
        "      useBoundStore((s) => s.count) * 2\n",
        "      useBoundStore((s) => s.inc)()\n",
        "      useBoundStore().count * 2\n",
        "      useBoundStore().inc()\n",
        "      useBoundStore.getState().count * 2\n",
        "      useBoundStore.getState().inc()\n",
        "      useBoundStore.subscribe(\n",
        "        (state) => state.count,\n",
        "        (count) => console.log(count * 2),\n"
      ],
      "delta": {
        "type": "modify"
      },
      "line_range": [
        721,
        730
      ],
      "module": "tests/middlewareTypes.test.tsx"
    },
    "edit_line_ids": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "relevant_changes": [],
    "relevant_unchanged": {},
    "change_type": "modified",
    "src_info": {
      "project": "pmndrs~zustand",
      "commit": null
    },
    "transformations": []
  }
]